/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms.Reportes;

import Clases.CRUD;
import Clases.Categoria;
import Clases.Colores;
import Clases.Gasto;
import Clases.Strings;
import Clases.Venta;
import Clases.Vista;
import Forms.Categorias.Eliminar_Categoria;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.joda.time.DateTimeConstants;

/**
 *
 * @author jandr
 */
public class Reporte_Semana extends javax.swing.JPanel {

    String fecha1 = "";
    String fecha2 = "";
    ArrayList<Venta> ventasCategorias = new ArrayList<Venta>();
    ArrayList<Categoria> categorias = new ArrayList<Categoria>();
    ArrayList<Gasto> gastos = new ArrayList<>();
    String col[] = {"Categoria", "Inicial", "%"};
    DefaultTableModel tableModel = new DefaultTableModel(col, 0);
    DefaultTableModel tableModel2;

    /**
     * Creates new form Reporte_semana
     */
    public Reporte_Semana() {
        initComponents();
        diseñar_form();
        new consultar_gastos().show();
    }

    private void diseñar_form() {
        this.pnlContenedor.setBackground(Colores.texto_botones_clicked);
        pnlContenedor.setBackground(Colores.fondo_primario);
        Date date1 = null;
        Date date2 = null;
        try {
            LocalDate ld = LocalDate.now();
            date2 = new SimpleDateFormat("yyyy-MM-dd").parse(ld.with(DayOfWeek.SUNDAY).toString());
            date1 = new SimpleDateFormat("yyyy-MM-dd").parse(ld.with(DayOfWeek.MONDAY).toString());
        } catch (ParseException ex) {
            Logger.getLogger(Reporte_Dia.class.getName()).log(Level.SEVERE, null, ex);
        }
        jdcFecha1.setDate(date1);
        jdcFecha2.setDate(date2);
        lblLoader.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlContenedor = new javax.swing.JPanel();
        jdcFecha1 = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVentas = new javax.swing.JTable();
        lblLoader = new javax.swing.JLabel();
        jdcFecha2 = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblGastos = new javax.swing.JTable();

        jdcFecha1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFecha1PropertyChange(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel1.setText("NOTA: Seleccione la fecha de inicio y final para poder mostrarle las ventas de esa semana.");

        tblVentas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblVentas.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblVentasPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(tblVentas);

        lblLoader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/loader.gif"))); // NOI18N

        jdcFecha2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFecha2PropertyChange(evt);
            }
        });

        tblGastos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblGastos);

        javax.swing.GroupLayout pnlContenedorLayout = new javax.swing.GroupLayout(pnlContenedor);
        pnlContenedor.setLayout(pnlContenedorLayout);
        pnlContenedorLayout.setHorizontalGroup(
            pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContenedorLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                    .addComponent(lblLoader, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlContenedorLayout.createSequentialGroup()
                        .addGroup(pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jdcFecha1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(pnlContenedorLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jdcFecha2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(30, 30, 30))
        );
        pnlContenedorLayout.setVerticalGroup(
            pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContenedorLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jdcFecha1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdcFecha2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlContenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(lblLoader, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(pnlContenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jdcFecha1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFecha1PropertyChange
        // TODO add your handling code here:
        SimpleDateFormat hourdateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        fecha1 = hourdateFormat.format(jdcFecha1.getDate());
        
    }//GEN-LAST:event_jdcFecha1PropertyChange

    private void jdcFecha2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFecha2PropertyChange
        // TODO add your handling code here:
        SimpleDateFormat hourdateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar c = Calendar.getInstance();
        c.setTime(jdcFecha2.getDate());
        c.add(Calendar.HOUR, 23);
        fecha2 = hourdateFormat.format(c.getTime());
        new consultar_ventas_categorias(fecha1, fecha2).show();
    }//GEN-LAST:event_jdcFecha2PropertyChange

    private void tblVentasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblVentasPropertyChange
        // TODO add your handling code here:
        System.out.println("Data change");
    }//GEN-LAST:event_tblVentasPropertyChange

    public class consultar_ventas_categorias implements Runnable {

        String fecha1;
        String fecha2;

        public consultar_ventas_categorias(String fecha1, String fecha2) {
            this.fecha1 = fecha1;
            this.fecha2 = fecha2;
        }

        public void show() {
            new Thread(this).start();
        }

        @Override
        public void run() {
            try {
                mostrar_loading(true);
                if (CRUD.conexion_internet()) {
                    ventasCategorias.clear();
                    ventasCategorias = CRUD.consultar_ventas_semana_categorias(fecha1, fecha2);
                    categorias = Categoria.recuperar_instancia();
                    tableModel.getDataVector().removeAllElements();
                    revalidate();
                    Object[] data2 = {"", "", ""};
                    tableModel.addRow(data2);
                    tableModel.addRow(data2);
                    double total_ventas=0.0, porcentaje_total = 0.0;
                    //Suma de las ventas totales de todas las categorias
                    for (int j = 0; j < ventasCategorias.size(); j++) {
                                total_ventas += ventasCategorias.get(j).getTotal();
                        }
                    //Se asigna porcentaje a aportar a los gastos dependiendo las ventas de cada categoria
                    for (int i = 0; i < categorias.size(); i++) {
                        String categoria = categorias.get(i).getNombreCategoria();
                        double total = 0.0;
                        for (int j = 0; j < ventasCategorias.size(); j++) {
                            if (categoria.equals(ventasCategorias.get(j).getProducto().getCategoria().getNombreCategoria())) {
                                total = ventasCategorias.get(j).getTotal();
                                categorias.get(j).setPorcentaje(Math.round(100/total_ventas*total));
                                porcentaje_total += categorias.get(j).getPorcentaje();
                            }
                        }
                        Object[] data = {categoria, total, categorias.get(i).getPorcentaje()};
                        tableModel.addRow(data);
                    }
                    Object[] data = {"Total", total_ventas, porcentaje_total};
                    tableModel.addRow(data);
                    tblVentas.setModel(tableModel);
                    porcentajes();
                    mostrar_loading(false);
                } else {
                    mostrar_loading(false);
                    Vista.mensaje_error(Strings.sin_internet, Strings.titulo_sin_internet);
                }
            } catch (InterruptedException | IOException | SQLException | ClassNotFoundException ex) {
                mostrar_loading(false);
                Logger.getLogger(Eliminar_Categoria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public class consultar_gastos implements Runnable {

        public void show() {
            new Thread(this).start();
        }

        @Override
        public void run() {
            try {
                mostrar_loading(true);
                if (CRUD.conexion_internet()) {
                    gastos = CRUD.consultar_gastos();
                    System.out.println(gastos.size() + "Gastos");
                    mostrar_loading(false);
                } else {
                    mostrar_loading(false);
                    Vista.mensaje_error(Strings.sin_internet, Strings.titulo_sin_internet);
                }
            } catch (InterruptedException | IOException | SQLException | ClassNotFoundException ex) {
                mostrar_loading(false);
                Logger.getLogger(Eliminar_Categoria.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void porcentajes() {
        String col2[] = {};
        tableModel2 = new DefaultTableModel(col2, 0);
        Object[] data1 = new Object[gastos.size() + 1];
        Object[] data2 = new Object[gastos.size() + 1];
        double total1 = 0;
        double total2 = 0;
        double tr = 0.0, tl = 0.0, ts = 0.0, ti = 0.0, tf = 0.0;
        for (int i = 0; i < gastos.size(); i++) {
            tableModel2.addColumn(gastos.get(i).getNombreGasto());
            data2[i] = gastos.get(i).getSemanal();
            data1[i] = gastos.get(i).getMensual();
            total1 += gastos.get(i).getMensual();
            total2 += gastos.get(i).getSemanal();
            if (i == (gastos.size() - 1)) {
                tableModel2.addColumn("Final");
                data2[i + 1] = total2;
                data1[i + 1] = total1;
            }
        }
        tableModel2.addRow(data1);
        tableModel2.addRow(data2);
        for (int i = 0; i < categorias.size(); i++) {
            String categoria = categorias.get(i).getNombreCategoria();
            Object col3[] = new Object[(gastos.size() + 1)];
            for (int j = 0; j < ventasCategorias.size(); j++) {
                if (categoria.equals(ventasCategorias.get(j).getProducto().getCategoria().getNombreCategoria())) {
                    double total = 0.0;
                    for (int k = 0; k < (gastos.size() + 1); k++) {
                        if (k < gastos.size()) {
                            if ( k < (gastos.size()-1)) {
                                System.out.println(tableModel.getValueAt(i + 2, 2));
                                double porcentaje = Double.valueOf(tableModel.getValueAt(i + 2, 2).toString());
                                col3[k] = (porcentaje * gastos.get(k).getSemanal()) / 100;
                                total += (porcentaje * gastos.get(k).getSemanal()) / 100;
                            } else {
                                col3[k] = ventasCategorias.get(j).getTotal() * .25;
                                total += ventasCategorias.get(j).getTotal() * .25;
                            }                           
                        } else {
                            col3[k] = ventasCategorias.get(j).getTotal() - total;
                            tf += ventasCategorias.get(j).getTotal() - total;
                        }
                    }
                }
            }
            tableModel2.addRow(col3);
        }
        tblGastos.setModel(tableModel2);
    }

    private void mostrar_loading(boolean mostrar) {
        tblVentas.setVisible(!mostrar);
        lblLoader.setVisible(mostrar);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdcFecha1;
    private com.toedter.calendar.JDateChooser jdcFecha2;
    private javax.swing.JLabel lblLoader;
    private javax.swing.JPanel pnlContenedor;
    private javax.swing.JTable tblGastos;
    private javax.swing.JTable tblVentas;
    // End of variables declaration//GEN-END:variables
}
